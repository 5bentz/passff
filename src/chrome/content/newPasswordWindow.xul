<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://passff/skin/preferences.css" type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://passff/locale/newPassword.dtd">

<window id="passff-new-password-window"
        title="&window.title;"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <vbox>
    <groupbox align="start">
      <caption label="&window.header;"/>
      <radiogroup>
        <vbox>
          <hbox>
            <label control="password-name" value="&inputs.password_name.label;"/>
            <textbox id="password-name" value=""/>
          </hbox>
          <hbox>
            <label control="password" value="&inputs.password.label;"/>
            <textbox id="password" type="password" value=""/>
          </hbox>
          <hbox>
            <label control="password-confirmation" value="&inputs.password_confirmation.label;"/>
            <textbox id="password-confirmation" type="password" value=""/>
          </hbox>
          <hbox>
            <label control="additional-info" value="&inputs.additional_info.label;"/>
            <textbox id="additional-info" multiline="true" value=""/>
          </hbox>
          <hbox>
            <button id="save-button" label="&inputs.add_password_button.label;" oncommand="onAddPassword();"/>
          </hbox>
          <hbox id="errors-container">
          </hbox>
        </vbox>
      </radiogroup>
    </groupbox>
  </vbox>

  <script>
    let pass = window.arguments[0];
    let refreshFn = window.arguments[1];

    function isPresent(field, errorMsg) {
      return function(inputData) {
        if (!inputData[field] || !/\S/.test(inputData[field])) {
          return errorMsg;
        }
      };
    }

    function matches(field1, field2, errorMsg) {
      return function(inputData) {
        if (inputData[field1] !== inputData[field2]) {
          return errorMsg;
        }
      };
    }

    let validations = [
      isPresent('name', "&errors.name_is_required;"),
      isPresent('password', "&errors.password_is_required;"),
      matches('password', 'passwordConfirmation', "&errors.password_confirmation_mismatch;"),
    ];

    function validateInput(inputData) {
      return validations.reduce(function(errors, validatorFn) {
        let error = validatorFn(inputData);
        if (error) {
          errors.push(error);
        }
        return errors;
      }, []);
    }

    function emptyElement(element) {
      while (element.firstChild) {
        element.removeChild(element.firstChild);
      }
    }

    function onAddPassword() {
      try {
        let nameField           = document.getElementById('password-name'),
            passwordField       = document.getElementById('password'),
            passwordConfField   = document.getElementById('password-confirmation'),
            additionalInfoField = document.getElementById('additional-info'),
            errorsContainer = document.getElementById('errors-container'),
            inputData = {
              name                 : nameField.value,
              password             : passwordField.value,
              passwordConfirmation : passwordConfField.value,
              additionalInfo       : additionalInfoField.value,
            },
            errors = validateInput(inputData);

        emptyElement(errorsContainer);

        if (errors.length > 0) {
          errors.forEach(function(errorMsg) {
            let errorLabel = document.createElement('label');
            errorLabel.setAttribute('value', errorMsg);
            errorsContainer.appendChild(errorLabel);
          });
        } else {
          let onSuccess = function() {
            refreshFn();
            window.close();
          };
          let onError = function(result) {
            window.alert("&errors.pass_execution_failed;:\n" + JSON.stringify(result));
          };
          pass.addNewPassword(inputData.name, inputData.password, inputData.additionalInfo, onSuccess, onError);
        }
      } catch (e) {
        window.alert("&errors.unexpected_error;:\n" + e.name + ' ' + e.message);
      }
    }
  </script>
</window>
