<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://passff/skin/preferences.css" type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://passff/locale/newPassword.dtd">

<window id="passff-new-password-window"
        title="&window.title;"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <preferences>
    <preference id="default-password-length" name="extensions.passff.defaultPasswordLength" type="int" />
    <preference id="default-include-symbols" name="extensions.passff.defaultIncludeSymbols" type="bool" />
    <preference id="prefer-insert" name="extensions.passff.preferInsert" type="bool" />
  </preferences>
  <vbox>
    <groupbox align="start">
      <caption label="&window.header;"/>
      <tabbox id="add-password-tabbox" flex="1">
        <tabs>
          <tab id="generate-tab" label="&tabs.generate;"/>
          <tab id="insert-tab" label="&tabs.insert;"/>
        </tabs>
        <tabpanels>
          <vbox id="generate-tabpanel">
            <hbox>
              <label control="gen-password-name" value="&inputs.password_name.label;"/>
              <textbox id="gen-password-name" value=""/>
            </hbox>
            <hbox>
              <label control="gen-password-length" value="&inputs.password_length.label;"/>
              <textbox id="gen-password-length" type="number" preference="default-password-length"/>
            </hbox>
            <hbox>
              <checkbox id="gen-include-symbols" label="&inputs.include_symbols.label;" preference="default-include-symbols"/>
            </hbox>
            <hbox>
              <button id="gen-save-button" label="&inputs.generate_password_button.label;" oncommand="onGeneratePassword();"/>
            </hbox>
            <hbox id="gen-errors-container">
            </hbox>
          </vbox>
          <vbox id="insert-tabpanel">
            <hbox>
              <label control="add-password-name" value="&inputs.password_name.label;"/>
              <textbox id="add-password-name" value=""/>
            </hbox>
            <hbox>
              <label control="add-password" value="&inputs.password.label;"/>
              <textbox id="add-password" type="password" value=""/>
            </hbox>
            <hbox>
              <label control="add-password-confirmation" value="&inputs.password_confirmation.label;"/>
              <textbox id="add-password-confirmation" type="password" value=""/>
            </hbox>
            <hbox>
              <label control="add-additional-info" value="&inputs.additional_info.label;"/>
              <textbox id="add-additional-info" multiline="true" value=""/>
            </hbox>
            <hbox>
              <button id="add-save-button" label="&inputs.add_password_button.label;" oncommand="onAddPassword();"/>
            </hbox>
            <hbox id="add-errors-container">
            </hbox>
          </vbox>
        </tabpanels>
      </tabbox>
    </groupbox>
  </vbox>

  <script>
    let oPrefService = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranchInternal);
    function chooseDefaultTab() {
      if (oPrefService.getBoolPref('extensions.passff.preferInsert')) {
        let insertTab      = document.getElementById('insert-tab'),
            insertTabpanel = document.getElementById('insert-tabpanel'),
            tabbox         = document.getElementById('add-password-tabbox');
        tabbox.selectedTab = insertTab;
        tabbox.selectedPanel = insertTabpanel;
      }
    }
    document.addEventListener('DOMContentLoaded', chooseDefaultTab);

    let pass = window.arguments[0];
    let refreshFn = window.arguments[1];

    function isPresent(field, errorMsg) {
      return function(inputData) {
        if (!inputData[field] || !/\S/.test(inputData[field])) {
          return errorMsg;
        }
      };
    }

    function matches(field1, field2, errorMsg) {
      return function(inputData) {
        if (inputData[field1] !== inputData[field2]) {
          return errorMsg;
        }
      };
    }

    let addValidations = [
      isPresent('name', "&errors.name_is_required;"),
      isPresent('password', "&errors.password_is_required;"),
      matches('password', 'passwordConfirmation', "&errors.password_confirmation_mismatch;"),
    ];
    let genValidations = [
      isPresent('name', "&errors.name_is_required;"),
    ];

    function validateInput(validations, inputData) {
      return validations.reduce(function(errors, validatorFn) {
        let error = validatorFn(inputData);
        if (error) {
          errors.push(error);
        }
        return errors;
      }, []);
    }

    function emptyElement(element) {
      while (element.firstChild) {
        element.removeChild(element.firstChild);
      }
    }

    function makePasswordAdder(validations, errorsContainerId, getInput, addPassword) {
      return function() {
        try {
          let inputData = getInput(),
              errorsContainer = document.getElementById(errorsContainerId),
              errors = validateInput(validations, inputData);

          emptyElement(errorsContainer);

          if (errors.length > 0) {
            errors.forEach(function(errorMsg) {
              let errorLabel = document.createElement('label');
              errorLabel.setAttribute('value', errorMsg);
              errorsContainer.appendChild(errorLabel);
            });
          } else {
            if (pass.isPasswordNameTaken(inputData.name)) {
              if (!window.confirm("&inputs.overwrite_password_prompt;")) {
                return;
              }
            }
            let onSuccess = function() {
              refreshFn();
              window.close();
            };
            let onError = function(result) {
              window.alert("&errors.pass_execution_failed;:\n" + JSON.stringify(result));
            };
            addPassword(inputData, onSuccess, onError);
          }
        } catch (e) {
          window.alert("&errors.unexpected_error;:\n" + e.name + ' ' + e.message);
        }
      };
    }

    var onAddPassword = makePasswordAdder(
      addValidations,
      'add-errors-container',
      function() {
        return {
          name                 : document.getElementById('add-password-name').value,
          password             : document.getElementById('add-password').value,
          passwordConfirmation : document.getElementById('add-password-confirmation').value,
          additionalInfo       : document.getElementById('add-additional-info').value,
        };
      },
      function(inputData, onSuccess, onError) {
        pass.addNewPassword(inputData.name, inputData.password, inputData.additionalInfo, onSuccess, onError);
      }
    );

    var onGeneratePassword = makePasswordAdder(
      genValidations,
      'gen-errors-container',
      function() {
        return {
          name           : document.getElementById('gen-password-name').value,
          length         : document.getElementById('gen-password-length').value,
          includeSymbols : document.getElementById('gen-include-symbols').checked,
        };
      },
      function(inputData, onSuccess, onError) {
        pass.generateNewPassword(inputData.name, inputData.length, inputData.includeSymbols, onSuccess, onError);
      }
    );
  </script>
</window>
